Parent process -:

#include<stdio.h>
#include<stdlib.h>
#include<unistd.h>
#include<sys/types.h>
#include<sys/wait.h>
#include<String.h>

void sort_array(int *arr,int n){
    int temp;
    for(int i=0;i<n;i++){
        for(int j=0;j<n-i-1;j++){
            if(arr[j]>arr[j+1]){
                int temp=arr[j];
                arr[j]=arr[j+1];
                arr[j+1]=temp;
            }
        }
    }
}


int main(int argc,char *argv[]){
    int n;
    printf("Enter the number of elements:\n");
    scanf("%d" , &n);
    
    int arr[n];
    printf("Enter the elements\n");
    for(int i=0;i<n;i++){
        scanf("%d",arr[i]);
    }
    
    sort_array(arr,n);
    
    pid_t pid = fork();
    
    if(pid<0){
        fprintf(stderr, "Fork failed");
        return 1;
    }else if(pid == 0{
        char *args[n+2];
        args[0] = "./child";
        
        for(int i=0;i<n;i++){
            args[i+1] = malloc(10);
            sprintf(args[i+1], "%d", arr[i]);
        }
        
        args[n+1] = NULL;
        execve(args[0],args,NULL);
        
        perror("execve failed");
        return 1;
        
        
    }
    else{
        wait(NULL);
        printf("child process completed.\n");
    }
    
    return 0;
    
}

Child pocess -:
#include<stdio.h>
#include<stdlib.h>

int main(int argc,int *argv[]){
    printf("Array in reverse order:\n");
    for(int i=argc-1;i>0;i--){
        printf("%s",argv[i]);
    }
    printf("\n");
    return 0;
}
